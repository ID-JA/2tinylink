{
	"info": {
		"_postman_id": "5d9d5a8e-58cb-4412-b0c4-e38b08c81820",
		"name": "2tinylink",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Corresponded Url",
			"item": [
				{
					"name": "Get Url by Alias",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_host}}/urls/Yd2",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"urls",
								"Yd2"
							]
						},
						"description": "### Endpoint\n```bash\nGET /api/urls/{alias}\n```\n* Required parameters:\n  - alias: a string representing the alias associated with the original URL.\n\n### Description\n- Returns the original URL for a given alias.\n\n### Responses\n- `200`: Success. Returns the original URL corresponding to the provided alias in the response body.\n```json\n{\n    \"url\": \"https://www.linkedin.com/feed/\"\n}\n```\n- `404`: Not Found.\n    - With empty `code` property in response body: The server cannot find the URL of a given alias. \n        ```json\n{\n    \"type\": \"https://tools.ietf.org/html/rfc7231#section-6.5.4\",\n    \"title\": \"Cannot find url with alias : 'WwV9Td'\",\n    \"status\": 404,\n    \"traceId\": \"00-cea6fb0158bedb2ba705b3ca82c68704-53506110eba1ae3b-00\",\n    \"code\": \"\"\n}\n        ```\n    - With `Alias.Expired` code: The alias has expired and is no longer accessible. You can use this code to decide to display a friendly page to the user that the link has expired.\n        ```json\n        {\n            \"type\": \"https://tools.ietf.org/html/rfc7231#section-6.5.4\",\n            \"title\": \"Alias has expired!\",\n            \"status\": 404,\n            \"traceId\": \"00-a613e46eac3011dcd165a8f5bbfc3eae-56e94e2e011fb537-00\",\n            \"code\": \"Alias.Expired\"\n        }\n        ```"
					},
					"response": []
				}
			]
		},
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"function extractSubstring(str, targetLetter) {\r",
									"  const startIndex = str.indexOf(targetLetter);\r",
									"  return str.substring(startIndex + 1);\r",
									"}\r",
									"\r",
									"\r",
									"const url = extractSubstring(pm.response.json().emailConfirmationUrl,\"?\");\r",
									"\r",
									"const queryParams = url\r",
									"  .split('&')\r",
									"  .reduce((accumulator, singleQueryParam) => {\r",
									"    const [key, value] = singleQueryParam.split('=');\r",
									"    accumulator[key] = value;\r",
									"    return accumulator;\r",
									"}, {});\r",
									"\r",
									"pm.collectionVariables.set(\"email_confirmation_token\", queryParams.Token);\r",
									"pm.collectionVariables.set(\"last_registred_username\", queryParams.UserName);\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\":\"{{$randomFirstName}}\",\r\n    \"lastName\":\"{{$randomLastName}}\",\r\n    \"email\":\"{{$randomEmail}}\",\r\n    \"password\":\"{{default_password}}\",\r\n    \"userName\":\"{{$randomFirstName}}{{$randomInt}}\"\r\n\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_host}}/auth/register",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "- `201` : The request has been successful. The user is required to check their email to confirm their email address.\n**P.S: Sending Email not implemented yet**\n- `422` : Invalid data payload."
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UsernameOrEmail\":\"Hollie902\",\r\n    \"Password\":\"{{default_password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_host}}/auth/login",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "- `200` : The request has been successful.\n**After a successful authentication, the 'Authorize' header will be automatically added to your requests. This allows you to access any endpoint in the postman that requires authentication without needing to manually add the header for each request**\n- `422`: Invalid data payload.\n- `409`: Email address must be confirmed to sign in."
					},
					"response": []
				},
				{
					"name": "Login As Superuser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.collectionVariables.set(\"access_token\", responseJson.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UsernameOrEmail\":\"john.doe\",\r\n    \"Password\":\"{{default_password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_host}}/auth/login",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "- `200` : The request has been successful.\n**After a successful authentication, the 'Authorize' header will be automatically added to your requests. This allows you to access any endpoint in the postman that requires authentication without needing to manually add the header for each request**\n- `422`: Invalid data payload.\n- `409`: Email address must be confirmed to sign in.\n**The Demo User is a special user account that has access to all the functionality in the application.**"
					},
					"response": []
				},
				{
					"name": "Login As Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const responseJson = pm.response.json();\r",
									"pm.collectionVariables.set(\"access_token\", responseJson.token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UsernameOrEmail\":\"admin.user\",\r\n    \"Password\":\"{{default_password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{api_host}}/auth/login",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "- `200` : The request has been successful.\n**After a successful authentication, the 'Authorize' header will be automatically added to your requests. This allows you to access any endpoint in the postman that requires authentication without needing to manually add the header for each request**\n- `422`: Invalid data payload.\n- `409`: Email address must be confirmed to sign in.\n**The Demo User is a special user account that has access to all the functionality in the application.**"
					},
					"response": []
				},
				{
					"name": "Email Confirmation",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{api_host}}/auth/email-confirmation?UserName={{last_registred_username}}&Token={{email_confirmation_token}}",
							"host": [
								"{{api_host}}"
							],
							"path": [
								"auth",
								"email-confirmation"
							],
							"query": [
								{
									"key": "UserName",
									"value": "{{last_registred_username}}"
								},
								{
									"key": "Token",
									"value": "{{email_confirmation_token}}"
								}
							]
						},
						"description": "- Endpoint for email confirmation.\n- `401` : When the server cannot any user with the associated provided username.\n- `409` : When the server cannot create a confirmation token."
					},
					"response": []
				}
			]
		},
		{
			"name": "Profile Management",
			"item": [
				{
					"name": "User By UserName",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5132/api/Profiles/Buddy930",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5132",
							"path": [
								"api",
								"Profiles",
								"Buddy930"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Link Shortening",
			"item": [
				{
					"name": "Standard Shortening",
					"item": [
						{
							"name": "Create Standard Alias",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Url\": \"https://www.linkedin.com/feed/\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_host}}/standard/tiny-links",
									"host": [
										"{{api_host}}"
									],
									"path": [
										"standard",
										"tiny-links"
									]
								},
								"description": "- Endpoint for an  anonymous user to create a short link by providing the URL to short at the body of the request.\n- `200`: the request has succeeded.\n- `400`: if no body provided or the media type sent is unsupported media type by the server.\n- `422`: if invalid value of url e.g. empty."
							},
							"response": []
						},
						{
							"name": "Get Standard Alias By Id",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_host}}/standard/tiny-links/3887a62b-f142-4545-a15e-6265cf3d272d",
									"host": [
										"{{api_host}}"
									],
									"path": [
										"standard",
										"tiny-links",
										"3887a62b-f142-4545-a15e-6265cf3d272d"
									]
								},
								"description": "- Get a standard link by it's id.\n- `404` : if the server cannot find the link."
							},
							"response": []
						}
					]
				},
				{
					"name": "Pro Shortening",
					"item": [
						{
							"name": "Shortening",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Url\": \"https://www.linkedin.com/feed/\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_host}}/pro/aliases",
									"host": [
										"{{api_host}}"
									],
									"path": [
										"pro",
										"aliases"
									]
								}
							},
							"response": []
						},
						{
							"name": "Shortening with Expired At",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Url\": \"https://www.linkedin.com/feed/\",\r\n    \"ExpiredAt\":\"2023-04-06T03:21Z\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_host}}/pro/aliases",
									"host": [
										"{{api_host}}"
									],
									"path": [
										"pro",
										"aliases"
									]
								}
							},
							"response": []
						},
						{
							"name": "Shortening with custom alias",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"Url\": \"https://www.linkedin.com/feed/\",\r\n    \"CustomAlias\":\"David\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{api_host}}/pro/aliases",
									"host": [
										"{{api_host}}"
									],
									"path": [
										"pro",
										"aliases"
									]
								},
								"description": "- `409` : When you try to create a shortlink with already existed alias\n```json\n{\n    \"type\": \"https://tools.ietf.org/html/rfc7231#section-6.5.8\",\n    \"title\": \"Alias already exists, please choose a different alias.\",\n    \"status\": 409,\n    \"traceId\": \"00-2139ba346f0581dc98036d2f9e164934-1b804a030bf378ed-00\"\n}\n```\n- `422` : If the provided custom alias does not match the regex set on the server.\n```json\n{\n    \"type\": \"https://tools.ietf.org/html/rfc4918#section-11.2\",\n    \"title\": \"'Custom Alias' must match the pattern '^[A-Za-z0-9]+(?:[-_][A-Za-z0-9]+)*[-_]?$'\",\n    \"status\": 422,\n    \"traceId\": \"00-760a7f8d25c04fc2916ae32b5cfe7b5b-68973d81bf122638-00\"\n}\n```"
							},
							"response": []
						},
						{
							"name": "Get Pro Alias By Id",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{api_host}}/pro/aliases/143bdcc8-f20b-48c2-a5dd-9901638ca2cd",
									"host": [
										"{{api_host}}"
									],
									"path": [
										"pro",
										"aliases",
										"143bdcc8-f20b-48c2-a5dd-9901638ca2cd"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const access_token = pm.collectionVariables.get(\"access_token\");",
					"",
					"const anonymousRequestsName = [\"Create a standard tiny link\",\"Get a standard tiny link by Id\",\"Get Url by Address\", \"Register\", \"Login\", \"Email Confirmation\", \"Login As Demo User\"];",
					"",
					"const currentRequestName = pm.info.requestName;",
					"",
					"if(!anonymousRequestsName.includes(currentRequestName))",
					"{",
					"    pm.request.headers.add({",
					"    key: \"Authorization\",",
					"    value: \"bearer \" + access_token",
					"    });",
					"",
					"}",
					"",
					"",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const loginEndpointNames = [\"Login\",\"Login As Demo User\"];",
					"",
					"const currentRequestName = pm.info.requestName;",
					"",
					"if(loginEndpointNames.includes(currentRequestName))",
					"{",
					"    const responseJson = pm.response.json();",
					"    pm.collectionVariables.set(\"access_token\", responseJson.token);",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "api_host",
			"value": "http://localhost:5132/api",
			"type": "default"
		},
		{
			"key": "default_password",
			"value": "Pa$$w0rd",
			"type": "default"
		},
		{
			"key": "access_token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1laWQiOiJEZW1vIiwibmJmIjoxNjc5Nzg1NTMwLCJleHAiOjE2Nzk4NzE5MzAsImlhdCI6MTY3OTc4NTUzMCwiaXNzIjoiaHR0cDovL2xvY2FsaG9zdDo1MTMyIiwiYXVkIjoiaHR0cDovL2xvY2FsaG9zdDozMDAwIn0.HLbje4DGC9i7J-rM5Uk4f9xqzmHUNdDZmwrBK0Uz7IU",
			"type": "default"
		},
		{
			"key": "email_confirmation_token",
			"value": "CfDJ8A7AekaJTjNOumtCjwlRcjWA5X99cWhNYW%2Fd7R14KMDBbpJoJkGBZOjW%2BW%2B0pk%2Bcl4vMir6IVTAwagbjWpsQHQ17nppo%2F%2FFkt2ZXH5vLiLjzeLLIrUMcGxb%2F1%2BjQjO1XqZ7p%2B6oAS%2B8NZUbWL2Z2AyXZFsNka2FdvZUvmUCAvcNWt8eDaIbZW2zKw2DzTaAKMDnfpT%2FxV53ieQ7XLVg6iCWmvgWxGVBN%2B76ZRbsV7S%2BqqqyRDht5d5R7UnEjn6%2F8qw%3D%3D",
			"type": "default"
		},
		{
			"key": "last_registred_username",
			"value": "Amya781",
			"type": "default"
		}
	]
}